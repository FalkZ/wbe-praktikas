import{S as M,i as N,s as H,e as t,a as o,b as _,c as a,n as P,d as p}from"./vendor.667bd5d5.js";function S(j){let e,d,c,E=`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isPrime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> tempNum <span class="token operator">=</span> num<span class="token punctuation">;</span>

  <span class="token comment">// can't be 1, 0 or negative</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// can't be float</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    tempNum <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// can be devided by another number</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> tempNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tempNum <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> notPrimes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

notPrimes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

primes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,w,l,y,k,v,u,I=`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fibo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fibo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fiboItterative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0n</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1n</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0n</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> last <span class="token operator">+</span> ret<span class="token punctuation">;</span>
    last <span class="token operator">=</span> ret<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sqrt5 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fiboFormula</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>g <span class="token operator">**</span> n <span class="token operator">/</span> sqrt5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fiboFormulaExact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>g <span class="token operator">**</span> n <span class="token operator">-</span> h <span class="token operator">**</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> sqrt5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">logTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> rec <span class="token operator">=</span> ns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"recursive"</span><span class="token punctuation">,</span> fibo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"itterative"</span><span class="token punctuation">,</span> fiboItterative<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"formula"</span><span class="token punctuation">,</span> fiboFormula<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"formulaExact"</span><span class="token punctuation">,</span> fiboFormulaExact<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,x,i,C,r,q,m,T,f,F,b;return{c(){e=t("h1"),e.textContent="3.",d=o(),c=t("pre"),w=o(),l=t("p"),l.textContent="Es spielt keine Rolle ob man Booleans oder 0/1 zur\xFCckgibt, da diese falsy/truthy sind. Man sollte es aber vermeiden weil man damit verwirrung stiften kann. Bzw. best practise ist Booleans zu verwenden.",y=o(),k=t("h1"),k.textContent="4.",v=o(),u=t("pre"),x=o(),i=t("p"),i.textContent="G ist Goldener Schnitt",C=o(),r=t("h2"),r.textContent="d)",q=o(),m=t("p"),m.textContent="Itterativ da kein Stackoverflow, und nicht Formel da sie mit Float arbeitet nicht Integern",T=o(),f=t("h1"),f.textContent="5.",F=o(),b=t("p"),b.textContent="Weil |H| kleiner als 1 ist wird H^n immer kleiner und kann vernachl\xE4ssigt werden",_(c,"class","language-js"),_(u,"class","language-js")},m(n,s){a(n,e,s),a(n,d,s),a(n,c,s),c.innerHTML=E,a(n,w,s),a(n,l,s),a(n,y,s),a(n,k,s),a(n,v,s),a(n,u,s),u.innerHTML=I,a(n,x,s),a(n,i,s),a(n,C,s),a(n,r,s),a(n,q,s),a(n,m,s),a(n,T,s),a(n,f,s),a(n,F,s),a(n,b,s)},p:P,i:P,o:P,d(n){n&&p(e),n&&p(d),n&&p(c),n&&p(w),n&&p(l),n&&p(y),n&&p(k),n&&p(v),n&&p(u),n&&p(x),n&&p(i),n&&p(C),n&&p(r),n&&p(q),n&&p(m),n&&p(T),n&&p(f),n&&p(F),n&&p(b)}}}class B extends M{constructor(e){super();N(this,e,null,S,H,{})}}export{B as default};
