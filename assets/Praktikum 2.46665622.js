import{S as n,i as s,s as a,e as p,g as t,b as o,a as e,n as c,d as u}from"./vendor.296f140d.js";function l(n){let s,a,l,k,r,i,m,d,f,b,w,y,g,v,h,x,C,T,q;return{c(){s=p("h1"),s.textContent="3.",a=t(),l=p("pre"),k=t(),r=p("p"),r.textContent="Es spielt keine Rolle ob man Booleans oder 0/1 zurückgibt, da diese falsy/truthy sind. Man sollte es aber vermeiden weil man damit verwirrung stiften kann. Bzw. best practise ist Booleans zu verwenden.",i=t(),m=p("h1"),m.textContent="4.",d=t(),f=p("pre"),b=t(),w=p("p"),w.textContent="G ist Goldener Schnitt",y=t(),g=p("h2"),g.textContent="d)",v=t(),h=p("p"),h.textContent="Itterativ da kein Stackoverflow, und nicht Formel da sie mit Float arbeitet nicht Integern",x=t(),C=p("h1"),C.textContent="5.",T=t(),q=p("p"),q.textContent="Weil |H| kleiner als 1 ist wird H^n immer kleiner und kann vernachlässigt werden",o(l,"class","language-js"),o(f,"class","language-js")},m(n,p){e(n,s,p),e(n,a,p),e(n,l,p),l.innerHTML='<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isPrime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> tempNum <span class="token operator">=</span> num<span class="token punctuation">;</span>\n\n  <span class="token comment">// can\'t be 1, 0 or negative</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// can\'t be float</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>\n    tempNum <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// can be devided by another number</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> tempNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tempNum <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> notPrimes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nnotPrimes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nprimes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',e(n,k,p),e(n,r,p),e(n,i,p),e(n,m,p),e(n,d,p),e(n,f,p),f.innerHTML='<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fibo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">fibo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">fiboItterative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0n</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1n</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0n</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">const</span> temp <span class="token operator">=</span> last <span class="token operator">+</span> ret<span class="token punctuation">;</span>\n    last <span class="token operator">=</span> ret<span class="token punctuation">;</span>\n    ret <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sqrt5 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">fiboFormula</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>g <span class="token operator">**</span> n <span class="token operator">/</span> sqrt5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">fiboFormulaExact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>g <span class="token operator">**</span> n <span class="token operator">-</span> h <span class="token operator">**</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> sqrt5<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">logTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> rec <span class="token operator">=</span> ns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"recursive"</span><span class="token punctuation">,</span> fibo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"itterative"</span><span class="token punctuation">,</span> fiboItterative<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"formula"</span><span class="token punctuation">,</span> fiboFormula<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">logTime</span><span class="token punctuation">(</span><span class="token string">"formulaExact"</span><span class="token punctuation">,</span> fiboFormulaExact<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',e(n,b,p),e(n,w,p),e(n,y,p),e(n,g,p),e(n,v,p),e(n,h,p),e(n,x,p),e(n,C,p),e(n,T,p),e(n,q,p)},p:c,i:c,o:c,d(n){n&&u(s),n&&u(a),n&&u(l),n&&u(k),n&&u(r),n&&u(i),n&&u(m),n&&u(d),n&&u(f),n&&u(b),n&&u(w),n&&u(y),n&&u(g),n&&u(v),n&&u(h),n&&u(x),n&&u(C),n&&u(T),n&&u(q)}}}class k extends n{constructor(n){super(),s(this,n,null,l,a,{})}}export{k as default};
