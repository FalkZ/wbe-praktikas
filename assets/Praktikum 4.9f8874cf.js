import{S as J,i as U,s as z,e as t,a as o,b as w,c as a,n as H,d as p}from"./vendor.6b7f9045.js";function D(M){let c,C,e,V=`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">factorial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> returnValue <span class="token operator">=</span> n<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    returnValue <span class="token operator">*=</span> <span class="token operator">--</span>n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">50n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,_,i,T,r,j,u,q=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">SCRIPTS</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"__base__/praktikum_4/scripts.js"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">oldAndLiving</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">SCRIPTS</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token constant">SCRIPTS</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> year<span class="token punctuation">,</span> living <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> year <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> living<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> name
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">oldAndLiving</span><span class="token punctuation">(</span><span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,v,f,I,l,B=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">SCRIPTS</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"__base__/praktikum_4/scripts.js"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">numberOfCodes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> ranges <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  ranges<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> end <span class="token operator">-</span> start <span class="token operator">+</span> acc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numberOfCodes</span><span class="token punctuation">(</span><span class="token constant">SCRIPTS</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,P,m,R,S,x,k,E=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">SCRIPTS</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"__base__/praktikum_4/scripts.js"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">scriptOfSample</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">symbol<span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> symbolCode <span class="token operator">=</span> symbol<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> ranges <span class="token punctuation">&#125;</span> <span class="token keyword">of</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span> <span class="token keyword">of</span> ranges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> symbolCode <span class="token operator">&amp;&amp;</span> symbolCode <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">scriptOfSample</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Latin"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">scriptOfSample</span><span class="token punctuation">(</span><span class="token string">"\u82F1"</span><span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Han"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">scriptOfSample</span><span class="token punctuation">(</span><span class="token string">"\u044F"</span><span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Cyrillic"</span>

<span class="token keyword">const</span> <span class="token function-variable function">countOccurrence</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">scriptsInString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  str
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">scriptOfSample</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>countOccurrence<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">scriptsInString</span><span class="token punctuation">(</span><span class="token string">'\u82F1\u56FD\u7684\u72D7\u8BF4"JavaScript", "\u0442\u044F\u0432"'</span><span class="token punctuation">,</span> <span class="token constant">SCRIPTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,O,d,L,b,A,y;return{c(){c=t("h1"),c.textContent="2.",C=o(),e=t("pre"),_=o(),i=t("h1"),i.textContent="3.",T=o(),r=t("h2"),r.textContent="a",j=o(),u=t("pre"),v=o(),f=t("h2"),f.textContent="b",I=o(),l=t("pre"),P=o(),m=t("h1"),m.textContent="Aufgabe 3: Schriftsysteme erkennen",R=o(),S=t("h2"),S.textContent="a",x=o(),k=t("pre"),O=o(),d=t("h2"),d.textContent="c",L=o(),b=t("p"),b.textContent="[\u201D.\u201D, \u201D:\u201D, \u201D/\u201D] sind unknown",A=o(),y=t("p"),y.textContent="Ein Buchstaben ist nicht aus dem lateinischen Alphabet => URL f\xFChrt an anderen Ort als man denken w\xFCrde.",w(e,"class","language-js"),w(u,"class","language-js"),w(l,"class","language-js"),w(k,"class","language-js")},m(n,s){a(n,c,s),a(n,C,s),a(n,e,s),e.innerHTML=V,a(n,_,s),a(n,i,s),a(n,T,s),a(n,r,s),a(n,j,s),a(n,u,s),u.innerHTML=q,a(n,v,s),a(n,f,s),a(n,I,s),a(n,l,s),l.innerHTML=B,a(n,P,s),a(n,m,s),a(n,R,s),a(n,S,s),a(n,x,s),a(n,k,s),k.innerHTML=E,a(n,O,s),a(n,d,s),a(n,L,s),a(n,b,s),a(n,A,s),a(n,y,s)},p:H,i:H,o:H,d(n){n&&p(c),n&&p(C),n&&p(e),n&&p(_),n&&p(i),n&&p(T),n&&p(r),n&&p(j),n&&p(u),n&&p(v),n&&p(f),n&&p(I),n&&p(l),n&&p(P),n&&p(m),n&&p(R),n&&p(S),n&&p(x),n&&p(k),n&&p(O),n&&p(d),n&&p(L),n&&p(b),n&&p(A),n&&p(y)}}}class G extends J{constructor(c){super();U(this,c,null,D,z,{})}}export{G as default};
